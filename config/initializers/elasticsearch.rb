#Elasticsearch::Model.client = Elasticsearch::Client.new(url: ENV['ELASTICSEARCH_URL'] || 'http://localhost:9200', log: true)

#Elasticsearch::Model.client = Elasticsearch::Client.new hosts: hosts, transport_options: { ssl: { ca_file: '/etc/ssl/certs/cacert.pem' } }
#Elasticsearch::Model.client = Elasticsearch::Client.new hosts: 'https://localhost:9200', transport_options: { ssl: { verify: false } }
# client = OpenSearch::Client.new(host: 'http://localhost:9200')
# client = OpenSearch::Client.new(
#   url: "http://localhost:9200",
#   retry_on_failure: 5,
#   request_timeout: 120,
#   log: true
# )

#client.cluster.health

#Elasticsearch::Model.client = # Colons and uppercase/lowercase don't matter when using
# the 'ca_fingerprint' parameter
#CERT_FINGERPRINT = '64F2593F...'

# Password for the 'elastic' user generated by Elasticsearch
#ELASTIC_PASSWORD = "<password>"

# Elasticsearch::Model.client = Elasticsearch::Client.new(
#   host: "https://elastic:#{ENV["ELASTIC_PASSWORD"]}@localhost:9200",
#   transport_options: { ssl: { verify: false } },
#   ca_fingerprint: ENV["CERT_FINGERPRINT"]
# )


require 'elasticsearch'


client = Elasticsearch::Client.new(
  url: "https://elastic:#{ENV['ELASTIC_PASSWORD']}@localhost:9200",
  transport_options: {
    ssl: {
      ca_file: "/Volumes/Install\ macOS\ Sonoma/Projects/kibana-8.12.0/data/ca_1707023704536.crt",
      verify: false # Set this to true if you have a valid CA file
    }
  },
  headers: { 'Content-Type' => 'application/json' }, # Add this line to specify the content type
  log: true # Set this to true if you want to enable logging
)

response = client.ping

puts "Connected to Elasticsearch: #{response}"
client.cluster.health
Elasticsearch::Model.client = client